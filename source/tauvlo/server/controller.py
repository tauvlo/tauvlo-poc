from decimal import Decimal
from typing import Optional, List

from tauvlo.server.external.stellar.stellar_controller import StellarController
from tauvlo.server.persistence.json_models.portfolio import PortfolioResponse, TauvloAsset
from tauvlo.server.persistence.json_models.stellar import XLMBalanceResponse, TauvloOffersResponse, \
    StellarTransactionResult, PropertySellRequest, PropertyBuyRequest

from tauvlo.server.persistence.dao import OwnershipDAO, UserDAO, PropertyDAO, TransactionRecordDAO, UniqueVisitsDAO
from tauvlo.server.persistence.json_models.ownership import OwnershipListResponse
from tauvlo.server.persistence.json_models.property import PropertyDetails, PropertyDetailResponse, \
    PropertyListResponse, RegisterPropertyRequest
from tauvlo.server.persistence.json_models.transaction import TransactionDetails
from tauvlo.server.persistence.json_models.user import UserDetails, UserDetailResponse
from tauvlo.server.persistence.orm_model import TransactionRecordType

AMOUNT_FORMAT_STRING = "{:,.2f}"


class Controller:
    def __init__(self):
        # DB handlers, DAO instantiation and controller code goes into this class.
        self.stellar_controller = StellarController()

        self.user_dao = UserDAO()
        self.property_dao = PropertyDAO()
        self.ownership_dao = OwnershipDAO()
        self.transaction_record_dao = TransactionRecordDAO()
        self.unique_visits_dao = UniqueVisitsDAO()

    def get_xlm_balance(self, public_key: str) -> XLMBalanceResponse:
        raw_balance = self.stellar_controller.get_xlm_balance(public_key)
        return XLMBalanceResponse(xlm_balance=str(raw_balance))

    def log_visit(self, ip_address: str, page_name: str) -> None:
        self.unique_visits_dao.log_visit(ip_address, page_name)

    def get_user_detail(self, user_id: str) -> Optional[UserDetailResponse]:
        user_object = self.user_dao.get_user_detail(user_id)
        if user_object is None:
            return None
        else:
            details = UserDetails(**user_object.details)

            return UserDetailResponse(
                user_id=user_object.user_id,
                details=details
            )

    def register_property(self, new_property: RegisterPropertyRequest) -> StellarTransactionResult:
        if self.user_dao.get_user_detail(new_property.poster_id) is None:
            # create a new user if they don't yet exist
            user_details = UserDetails(name="Autogenerated User")
            self.user_dao.create_user(user_id=new_property.poster_id, details=user_details)

        self.property_dao.create_property(
            new_property.property_id,
            new_property.poster_id,
            new_property.details
        )
        issuing_result = self.stellar_controller.issue_tokens(token_identifier=new_property.property_id,
                                                              receiver_public_key=new_property.poster_id,
                                                              amount=Decimal(new_property.details.tokens_issued))

        if not issuing_result.success_flag:
            self.property_dao.delete_property(new_property.property_id)
        return issuing_result

    def get_property_detail(self, property_id: str) -> Optional[PropertyDetailResponse]:
        property_object = self.property_dao.get_property_detail(property_id)
        if property_object is None:
            return None
        else:
            details = PropertyDetails(**property_object.details)

            return PropertyDetailResponse(
                property_id=property_object.property_id,
                poster_id=property_object.poster_id,
                details=details
            )

    def get_ownership_list(self, user_id: Optional[str], property_id: Optional[str]) -> OwnershipListResponse:
        records = self.ownership_dao.get_ownership_list(user_id, property_id)
        return OwnershipListResponse(
            records=records
        )

    def get_properties_page(self, page_number: int, page_size: int = 10) -> PropertyListResponse:
        """
        Return a properties list page.
        @page_number: Page number starting from 1
        @page_size: Size of each page
        """
        offset = (page_number - 1) * page_size
        properties = self.property_dao.get_properties_list(offset, page_size)
        response = PropertyListResponse(properties=[])
        for db_property in properties:
            property_object = PropertyDetailResponse(
                property_id=db_property.property_id,
                poster_id=db_property.poster_id,
                details=db_property.details
            )
            response.properties.append(property_object)
        return response

    def _get_asset_avg_purchase_prices(self, public_key: str):
        # TODO implement
        return {"TVL000X001": Decimal("15.0")}

    def _get_asset_value_per_token(self, asset_code: str) -> Decimal:
        # TODO implement
        return Decimal("25.0")

    def _get_asset_property_name_map(self, asset_codes: List[str]) -> dict:
        # TODO implement
        return {asset_code: "Property name" for asset_code in asset_codes}

    def get_assets(self, public_key: str) -> PortfolioResponse:
        balances = self.stellar_controller.get_balances(public_key)
        asset_avg_purchase_prices = self._get_asset_avg_purchase_prices(public_key)
        total_balance = Decimal("0.0")
        total_purchase_price = Decimal("0.0")

        asset_property_name_map = self._get_asset_property_name_map([asset[0] for asset in balances.tauvlo_balances])

        assets = []
        for asset_code, amount in balances.tauvlo_balances:
            value_per_token = self._get_asset_value_per_token(asset_code)
            asset_value = amount * value_per_token
            asset_purchase_price = asset_avg_purchase_prices.get(asset_code, value_per_token) * amount
            total_balance += asset_value
            total_purchase_price += asset_purchase_price
            if amount > 0:
                asset_profit_pct = 100 * ((asset_value - asset_purchase_price) / asset_purchase_price)
            else:
                asset_profit_pct = Decimal("0.0")

            assets.append(
                TauvloAsset(
                    property_name=asset_property_name_map.get(asset_code),
                    asset_code=asset_code,
                    amount=AMOUNT_FORMAT_STRING.format(amount),
                    total_value="$" + AMOUNT_FORMAT_STRING.format(asset_value),
                    total_profit_pct=AMOUNT_FORMAT_STRING.format(asset_profit_pct) + "%"
                )
            )
        return PortfolioResponse(
            total_balance="$" + AMOUNT_FORMAT_STRING.format(total_balance),
            total_gains="$" + AMOUNT_FORMAT_STRING.format(total_balance - total_purchase_price),
            usdc_trusted=balances.usdc_trusted,
            assets=assets
        )

    def get_offers(self, public_key: str) -> TauvloOffersResponse:
        offers = self.stellar_controller.list_all_tauvlo_offers(public_key)
        return TauvloOffersResponse(offers=offers)

    def get_trustline_xdr(self, public_key: str, asset_code: str):
        return self.stellar_controller.create_trustline_xdr(public_key, asset_code)

    def execute_transaction(self, transaction_xdr: str) -> StellarTransactionResult:
        return self.stellar_controller.execute_transaction(transaction_xdr)

    def buy_property_tokens_xdr(self, buy_request: PropertyBuyRequest, public_key: str):
        return self.stellar_controller.manage_tvl_buy_offer_xdr(
            usdc_price_per_token=buy_request.usdc_price_per_token,
            buying_tokens_amount=buy_request.buying_tokens_amount,
            account_public_key=public_key,
            tauvlo_asset_code=buy_request.tauvlo_asset_code,
            offer_id=buy_request.offer_id
        )

    def sell_property_tokens_xdr(self, sell_request: PropertySellRequest, public_key: str):
        return self.stellar_controller.manage_tvl_sell_offer_xdr(
            selling_tokens_amount=sell_request.selling_tokens_amount,
            usdc_price_per_token=sell_request.usdc_price_per_token,
            account_public_key=public_key,
            tauvlo_asset_code=sell_request.tauvlo_asset_code,
            offer_id=sell_request.offer_id
        )

    def get_offers_for_asset(self, asset_code: str) -> TauvloOffersResponse:
        offers = self.stellar_controller.list_all_offers_for_asset(asset_code)
        return TauvloOffersResponse(offers=offers)

    def debug_fill_db(self):
        self.user_dao.create_user("1234", details=UserDetails(name="Test 1"))
        self.user_dao.create_user("456", details=UserDetails(name="Test 2"))

        self.property_dao.create_property("XYZ1", "1234", details=PropertyDetails(name="Beachfront property 1"))
        self.property_dao.create_property("XYZ2", "456", details=PropertyDetails(name="Beachfront property 2"))

        self.ownership_dao.set_ownership("1234", "XYZ1", 2)
        self.ownership_dao.set_ownership("456", "XYZ1", 1)

        self.transaction_record_dao.record_transaction(
            user_id="1234",
            transaction_type=TransactionRecordType.BUY_TOKENS,
            property_id=None,
            details=TransactionDetails(description="Test 1")
        )
        self.transaction_record_dao.record_transaction(
            user_id="1234",
            transaction_type=TransactionRecordType.POSTING,
            property_id="XYZ1",
            details=TransactionDetails(description="Test 2")
        )
